---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: prometheus-operator
  name: prometheus-operator
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: kube-prometheus-stack
    version: 61.2.0
    origin: https://prometheus-community.github.io/helm-charts
  releaseName: prometheus-operator
  targetNamespace: taco-system
  values:
    alertmanager:
      enabled: false
    coreDns:
      enabled: false
    defaultRules:
      create: false
    fullnameOverride: prometheus-operator
    global:
      imageRegistry: harbor.taco-cat.xyz
      rbac:
        create: true
    grafana:
      enabled: false
    kubeApiServer:
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeDns:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeStateMetrics:
      enabled: false
    kubelet:
      enabled: false
    nodeExporter:
      enabled: false
    prometheus:
      enabled: false
    prometheusOperator:
      admissionWebhooks:
        deployment:
          image:
            registry: harbor.taco-cat.xyz
            repository: tks/admission-webhook
            tag: "v0.75.0"
            sha: ""
        patch:
          image:
            registry: harbor.taco-cat.xyz
            repository: tks/kube-webhook-certgen
            tag: v20221220-controller-v1.5.1-58-g787ea74b6
      cleanupCustomResource: true
      cleanupCustomResourceBeforeInstall: true
      createCustomResource: true
      enabled: true
      image:
        repository: tks/prometheus-operator
        tag: v0.75.0
      nodeSelector: {} # $(nodeSelector)
      prometheusConfigReloader:
        image:
          repository: tks/prometheus-config-reloader
          tag: v0.75.0
      thanosImage:
        repository: tks/thanos
        tag: v0.35.1
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: prometheus
  name: prometheus
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: kube-prometheus-stack
    version: 61.2.0
    origin: https://prometheus-community.github.io/helm-charts
  releaseName: prometheus
  targetNamespace: taco-system
  values:
    alertmanager:
      alertmanagerSpec:
        alertmanagerConfigSelector:
          matchLabels:
            alertmanagerConfig: example
        image:
          repository: tks/alertmanager
          tag: v0.27.0
        nodeSelector: {} # $(nodeSelector)
        retention: 2h
      config:
        global:
          slack_api_url: $(SlackUrl)
          smtp_auth_password: null
          smtp_auth_username: null
          smtp_from: null
          smtp_smarthost: null
        receivers:
        - name: default-alert
          slack_configs:
          - send_resolved: true
            channel: '#alert'
            username: Prometheus
            title: '{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing
              | len }}{{ end }}] {{ if or (and (eq (len .Alerts.Firing) 1) (eq (len .Alerts.Resolved)
              0)) (and (eq (len .Alerts.Firing) 0) (eq (len .Alerts.Resolved) 1)) }} {{ range
              .Alerts.Firing }}{{ .Labels.alertname }}{{ end }}{{ range .Alerts.Resolved
              }}{{ .Labels.alertname }}{{ end }}{{ end }}'
            text: |-
              {{ if or (and (eq (len .Alerts.Firing) 1) (eq (len .Alerts.Resolved) 0)) (and (eq (len .Alerts.Firing) 0) (eq (len .Alerts.Resolved) 1)) }} {{ range .Alerts.Firing }}{{ .Annotations.message }}{{ end }}{{ range .Alerts.Resolved }}{{ .Annotations.message  }}{{ end }}
              {{ else }}
              {{ if gt (len .Alerts.Firing) 0 }}
              *Alerts Firing:*
                {{ range .Alerts.Firing }}- {{ .Labels.alertname  }}: {{ .Annotations.message }}
              {{ end }}{{ end }}
              {{ if gt (len .Alerts.Resolved) 0 }}
              *Alerts Resolved:*
                {{ range .Alerts.Resolved }}- {{ .Labels.alertname }}: {{ .Annotations.message }}
              {{ end }}{{ end }}
              {{ end }}
        route:
          group_by:
          - alertname
          group_wait: 10s
          receiver: default-alert
          repeat_interval: 1h
          routes: # # []
      enabled: true
      service:
        nodePort: 30111
        type: NodePort
    coreDns:
      enabled: true
      serviceMonitor:
        interval: $(serviceScrapeInterval)
    defaultRules:
      create: false
    fullnameOverride: lma
    global:
      imageRegistry: harbor.taco-cat.xyz
      rbac:
        create: true
    grafana:
      enabled: false
    kubeApiServer:
      enabled: true
      serviceMonitor:
        interval: $(serviceScrapeInterval)
    kubeControllerManager:
      enabled: true
      serviceMonitor:
        interval: $(serviceScrapeInterval)
    kubeDns:
      enabled: true
      serviceMonitor:
        interval: $(serviceScrapeInterval)
    kubeEtcd:
      enabled: true
      endpoints: # # []
      serviceMonitor:
        interval: $(serviceScrapeInterval)
        scheme: http
    kubeProxy:
      enabled: true
      serviceMonitor:
        interval: $(serviceScrapeInterval)
    kubeScheduler:
      enabled: true
      serviceMonitor:
        interval: $(serviceScrapeInterval)
    kubeStateMetrics:
      enabled: false
    kubelet:
      enabled: false
    nodeExporter:
      enabled: false
    prometheus:
      prometheusSpec:
        evaluationInterval: 60s
        externalLabels:
          taco_cluster: $(clusterName)
        image:
          repository: tks/prometheus
          tag: v2.45.0
        nodeSelector: {} # $(nodeSelector)
        podMonitorNamespaceSelector:
          matchLabels:
            name: $(lmaNameSpace)
        podMonitorSelectorNilUsesHelmValues: false
        replicas: 1
        retention: 2d
        ruleNamespaceSelector:
          matchLabels:
            name: $(lmaNameSpace)
        ruleSelectorNilUsesHelmValues: false
        scrapeInterval: 30s
        scrapeTimeout: 10s
        secrets:
        - etcd-client-cert
        serviceMonitorNamespaceSelector:
          matchLabels:
            name: $(lmaNameSpace)
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes:
              - ReadWriteOnce
              resources:
                requests:
                  storage: 20Gi
              storageClassName: $(storageClassName)
        thanos:
          minTime: -3h
          objectStorageConfig:
            key: objstore.yml
            name: $(thanosObjstoreSecret)
          version: v0.18.0
      thanosServiceExternal:
        annotations: {} # $(awsNlbAnnotation)
        enabled: true
        labels: {}
        port: 10901
        nodePort: 30901
        portName: grpc
        targetPort: grpc
        type: NodePort
    prometheusOperator:
      enabled: false
      thanosImage:
        repository: tks/thanos
        tag: v0.35.1
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: eck-operator
  name: eck-operator
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: eck-operator
    version: 2.13.0
    origin: https://helm.elastic.co
  releaseName: eck-operator
  targetNamespace: elastic-system
  values:
    config:
      containerRegistry: docker.elastic.co
    global:
      createOperatorNamespace: false
      kubeVersion: 1.30.2
      manifestGen: true
    image:
      repository: harbor.taco-cat.xyz/tks/eck-operator
      tag: 1.8.0
    installCRDs: true
    replicaCount: 1
    softMultiTenancy:
      enabled: false
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: kube-state-metrics
  name: kube-state-metrics
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    # repository: https://kubernetes.github.io/kube-state-metrics
    # --------------------------------------------------------------------
    # this repo is not working on 2021.1.6
    # several issues are opend for this
    #    - https://github.com/kubernetes/kube-state-metrics/issues/1331
    #    - https://github.com/kubernetes/kube-state-metrics/issues/1337
    #    - https://github.com/kubernetes/kube-state-metrics/issues/1342
    # so, i'll use bitnami before the issues are closed
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: kube-state-metrics
    # version: 2.9.4
    version: 3.3.4
    origin: https://openinfradev.github.io/helm-repo
  releaseName: kube-state-metrics
  targetNamespace: taco-system
  values:
    collectors:
      verticalpodautoscalers: false
    image:
      registry: harbor.taco-cat.xyz
      repository: tks/kube-state-metrics
    kubeVersion: v1.30.2
    nodeSelector: {} # $(nodeSelector)
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: prometheus-node-exporter
  name: prometheus-node-exporter
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: prometheus-node-exporter
    version: 4.37.0
    origin: https://prometheus-community.github.io/helm-charts
  releaseName: prometheus-node-exporter
  targetNamespace: taco-system
  values:
    extraArgs:
    - --no-collector.hwmon
    # Expose the service to the host network
    hostNetwork: false
    image:
      registry: harbor.taco-cat.xyz
      repository: tks/node-exporter
      tag: v1.8.1
    prometheus:
      monitor:
        enabled: true
        relabelings:
        - action: replace
          sourceLabels:
          - __meta_kubernetes_endpoint_node_name
          targetLabel: hostname
    tolerations:
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
    - key: node-role.kubernetes.io/master
      operator: Exists
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: prometheus-pushgateway
  name: prometheus-pushgateway
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: prometheus-pushgateway
    version: 2.14.0
    origin: https://prometheus-community.github.io/helm-charts
  releaseName: prometheus-pushgateway
  targetNamespace: taco-system
  values:
    image:
      repository: harbor.taco-cat.xyz/tks/pushgateway
      tag: v1.9.0
    nodeSelector: {} # $(nodeSelector)
    service:
      type: ClusterIP
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: prometheus-process-exporter
  name: prometheus-process-exporter
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: prometheus-process-exporter
    version: 0.1.4-skt
    origin: https://openinfradev.github.io/helm-repo
  releaseName: prometheus-process-exporter
  targetNamespace: taco-system
  values:
    conf:
      processes: dockerd,kubelet,kube-proxy,ntpd,node
    images:
      tags:
        dep_check: harbor.taco-cat.xyz/tks/kubernetes-entrypoint:v1.0.0
        image_repo_sync: harbor.taco-cat.xyz/tks/docker:19.03
        process_exporter: harbor.taco-cat.xyz/tks/process-exporter:0.2.11
    labels:
      process_exporter:
        process_selector_key: process-exporter
        process_selector_value: enabled
    pod:
      # Expose the service to the host network
      hostNetwork: false
      lifecycle:
        upgrades:
          daemonsets:
            process_exporter:
              max_unavailable: 30%
      mandatory_access_control:
        type: null
      tolerations:
        process_exporter:
          enabled: true
          tolerations:
          - key: node-role.kubernetes.io/control-plane
            operator: Exists
          - key: node-role.kubernetes.io/master
            operator: Exists
          - key: node-role.kubernetes.io/node
            operator: Exists
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: eck-resource
  name: eck-resource
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: eck-resource
    version: 1.1.1
    origin: https://openinfradev.github.io/helm-repo
  releaseName: eck-resource
  targetNamespace: taco-system
  values:
    elasticsearch:
      adminPassword: tacoword
      count: 3
      enabled: true
      http:
        service:
          spec:
            ports:
            - name: https
              nodePort: 30011
              port: 9200
              targetPort: 9200
            type: NodePort
      image:
        repository: harbor.taco-cat.xyz/tks/elasticsearch
        tag: 7.5.1
      nodeSets:
        client:
          count: 1
          enabled: true
          javaOpts: -Xms2g -Xmx2g
          limitCpu: 2
          limitMem: 4Gi
          nodeSelector: $(nodeSelector)
          pvc:
            size: 0.5Gi
            storageClassName: $(storageClassName)
        hotdata:
          count: 3
          enabled: true
          javaOpts: -Xms2g -Xmx2g
          limitCpu: 1
          limitMem: 4Gi
          nodeSelector: $(nodeSelector)
          pvc:
            size: 100Gi
            storageClassName: $(storageClassName)
        master:
          count: 3
          enabled: true
          javaOpts: -Xms2g -Xmx2g
          limitCpu: 1
          limitMem: 4Gi
          nodeSelector: $(nodeSelector)
          pvc:
            size: 2Gi
            storageClassName: $(storageClassName)
        warmdata:
          count: 2
          enabled: false
          javaOpts: -Xms2g -Xmx2g
          limitCpu: 1
          limitMem: 2Gi
          nodeSelector: $(nodeSelector)
          pvc:
            size: 200Gi
            storageClassName: $(storageClassName)
    kibana:
      enabled: true
      http:
        service:
          spec:
            ports:
            - name: http
              nodePort: 30001
              port: 5601
              targetPort: 5601
            type: NodePort
        tls:
          selfSignedCertificate:
            disabled: true
      image:
        repository: harbor.taco-cat.xyz/tks/kibana
        tag: 7.5.1
      limitCpu: 1
      limitMem: 2Gi
      nodeSelector: $(nodeSelector)
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: grafana
  name: grafana
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: grafana
    version: 8.3.2
    origin: https://grafana.github.io/helm-charts
  releaseName: grafana
  targetNamespace: taco-system
  values:
    adminUser: $(defaultUser)
    adminPassword: $(defaultPassword)
    downloadDashboardsImage:
      repository: harbor.taco-cat.xyz/tks/curl
      tag: 7.85.0
    grafana.ini:
      plugins:
        grafana-piechart-panel: true
        vonage-status-panel: true
    image:
      registry: harbor.taco-cat.xyz
      repository: tks/grafana
      tag: 11.1.0
    imageRenderer:
      enabled: false
      image:
        registry: arbor.taco-cat.xyz
        repository: tks/grafana-image-renderer
        tag: latest
    initChownData:
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/busybox
        tag: 1.31.1
    nodeSelector: {} # $(nodeSelector)
    persistence:
      enabled: true
      size: 10G
      storageClassName: $(storageClassName)
    plugins:
    - vonage-status-panel
    - grafana-piechart-panel
    service:
      nodePort: 30000
      type: NodePort
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        searchNamespace: ALL
      datasources:
        enabled: true
        label: grafana_datasource
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/k8s-sidecar
        tag: 1.26.1
    testFramework:
      registry: harbor.taco-cat.xyz
      repository: tks/bats
      tag: v1.4.1
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: fluent-operator
  name: fluent-operator
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    origin: https://openinfradev.github.io/helm-repo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: fluent-operator
    version: 2.9.0
  releaseName: fluent-operator
  targetNamespace: taco-system
  values:
    fluentbit:
      enable: false
      image:
        repository: harbor.taco-cat.xyz/tks/fluent-bit
        tag: v2.2.0
    operator:
      container:
        repository: harbor.taco-cat.xyz/tks/fluent-operator
        tag: v2.9.0
      initcontainer:
        repository: harbor.taco-cat.xyz/tks/docker
        tag: '20.10'
      # FluentBit operator resources. Usually user needn't to adjust these.
      resources:
        limits:
          cpu: 1000m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 20Mi
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: fluentbit
  name: fluentbit
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: fluentbit-resource
    version: 1.3.0
    origin: https://openinfradev.github.io/helm-repo
  releaseName: fluentbit
  targetNamespace: taco-system
  values:
    fluentbit:
      alerts:
        enabled: false
      clusterName: $(clusterName)
      daemonset:
        spec:
          tolerations:
          - key: node-role.kubernetes.io/control-plane
            operator: Exists
          - key: node-role.kubernetes.io/master
            operator: Exists
          - key: node-role.kubernetes.io/node
            operator: Exists
      enabled: true
      exclude:
      - key: $kubernetes['container_name']
        value: kibana|elasticsearch|fluent-bit
      job:
        spec:
          nodeSelector:
            taco-lma: enabled
      nodeSelector: {} # $(nodeSelector)
      outputs:
        loki:
        - host: $(lokiHost)
          name: taco-loki
          port: $(lokiPort)
        lokiuser:
        - host: $(lokiuserHost)
          name: taco-loki-user
          port: $(lokiuserPort)
      parsers:
      - name: taco-syslog-parser-for-ubuntu
        regex:
          regex: ^(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)?
            *(?<message>.*)$
          timeFormat: '%b %d %H:%M:%S'
          timeKeep: false
          timeKey: time
      targetLogs:
      - bufferChunkSize: 2M
        bufferMaxSize: 5M
        do_not_store_as_default: false
        extraArgs:
          multilineParser: docker, cri
        index: container
        loki_name: taco-loki-user
        memBufLimit: 20MB
        multi_index:
        - index: platform
          key: $kubernetes['namespace_name']
          loki_name: taco-loki
          value: kube-system|$(lmaNameSpace)|taco-system|gatekeeper-system|argo
        parser: docker
        path: /var/log/containers/*.log
        tag: kube.*
        type: kubernates
      - index: syslog
        loki_name: taco-loki
        parser: taco-syslog-parser-for-ubuntu
        path: /var/log/syslog
        tag: syslog.*
        type: syslog
    fullnameOverride: fbcr-taco
    image:
      elasticsearchTemplates:
        repository: harbor.taco-cat.xyz/tks/curl
        tag: latest
      exporter:
        repository: harbor.taco-cat.xyz/tks/logalert-exporter
        tag: v0.1.1
      fluentbit:
        repository: harbor.taco-cat.xyz/tks/fluent-bit
        tag: v3.0.4
    logExporter:
      enabled: false
      serviceMonitor:
        enabled: false
      spec:
        nodeSelector: $(nodeSelector)
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: addons
  name: addons
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: lma-addons
    version: 1.9.0
    origin: https://openinfradev.github.io/helm-repo
  releaseName: addons
  targetNamespace: taco-system
  values:
    grafanaDashboard:
      include:
      - kubernetes
      - node
      - loki
      - calico
      - etcd
      istio:
        enabled: false
      jaeger:
        enabled: false
      namespace: $(lmaNameSpace)
    grafanaDatasource:
      enabled: true
      loki:
        enabled: true
        url: $(lokiHost):$(lokiPort)
      lokiuser:
        enabled: true
        url: $(lokiuserHost):$(lokiuserPort)
      namespace: $(lmaNameSpace)
      prometheus:
        enabled: true
        url: $(grafanaDatasourceMetric)
    kibanaInit:
      enabled: false
    prometheusRules:
      aggregation:
        enabled: true
      alert:
        enabled: false
      istio:
        aggregation:
          enabled: false
        optimization:
          enabled: false
    serviceMonitor:
      additionalScrapeConfigs: null
      argoRollout:
        enabled: true
        interval: $(serviceScrapeInterval)
      argocd:
        enabled: false
        interval: $(serviceScrapeInterval)
      argowf:
        enabled: false
        interval: $(serviceScrapeInterval)
      calico:
        enabled: true
        interval: $(serviceScrapeInterval)
      ceph:
        enabled: false
        interval: $(serviceScrapeInterval)
        mon_hosts: # # []
      federations: # # []
      grafana:
        enabled: true
        interval: $(serviceScrapeInterval)
      istio:
        enabled: false
        interval: $(serviceScrapeInterval)
      jaeger:
        enabled: false
        interval: $(serviceScrapeInterval)
      kubeStateMetrics:
        enabled: true
        interval: $(serviceScrapeInterval)
      kubelet:
        enabled: true
        interval: 30s
      nodeExporter:
        enabled: false
        interval: $(serviceScrapeInterval)
      processExporter:
        enabled: true
        interval: $(serviceScrapeInterval)
        selector:
          matchLabels:
            application: process_exporter
            component: metrics
            release_group: prometheus-process-exporter
      pushgateway:
        enabled: true
      trident:
        enabled: false
        interval: $(serviceScrapeInterval)
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: prometheus-adapter
  name: prometheus-adapter
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: prometheus-adapter
    version: 4.10.0
    origin: https://prometheus-community.github.io/helm-charts
  releaseName: prometheus-adapter
  targetNamespace: taco-system
  values:
    image:
      repository: harbor.taco-cat.xyz/tks/prometheus-adapter
      image.tag: v0.11.2
    prometheus:
      url: http://lma-prometheus
      port: 9090
    rules:
      default: false
    nodeselector: {} # $(nodeSelector)
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: kubernetes-event-exporter
  name: kubernetes-event-exporter
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: kubernetes-event-exporter
    version: 2.0.1
    origin: https://openinfradev.github.io/helm-repo
  releaseName: kubernetes-event-exporter
  targetNamespace: taco-system
  values:
    addons:
      loki:
        enabled: true
        host: $(lokiHost)
        port: $(lokiPort)
        target_file: /tmp/kubernetes-event.log
    clustername: $(clusterName)
    conf:
      default:
        hosts:
        - https://eck-elasticsearch-es-http.lma.svc.$(clusterName):9200
      logFormat: json
      logLevel: error
      recievers:
      - config:
          path: /tmp/kubernetes-event.log
        name: loki
        type: file
    image:
      exporter:
        repository: harbor.taco-cat.xyz/tks/kubernetes-event-exporter
        tag: v1.0
      sidecar:
        repository: harbor.taco-cat.xyz/tks/fluent-bit
        tag: 1.9.7-debug
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: minio
  name: minio
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: minio
    version: 5.2.0
    origin: https://charts.min.io
  releaseName: minio
  targetNamespace: taco-system
  values:
    deploymentUpdate:
      type: Recreate
    buckets:
    - name: tks-thanos
      objectlocking: false
      policy: public
      purge: false
      versioning: true
    - name: tks-loki
      objectlocking: false
      policy: public
      purge: false
      versioning: true
    - name: tks-loki-user
      objectlocking: false
      policy: public
      purge: false
      versioning: true
    consoleIngress:
      nodeSelector: {} # $(nodeSelector)
    consoleService:
      type: NodePort
      nodePort: 32001
    customCommands:
    - command: ilm rule add --expire-days 90 myminio/tks-thanos
    - command: ilm rule add --expire-days 15 myminio/tks-loki
    - command: ilm rule add --expire-days 15 myminio/tks-loki-user
    - command: ilm ls myminio/tks-thanos
    - command: ilm ls myminio/tks-loki
    - command: ilm ls myminio/tks-loki-user
    image:
      repository: harbor.taco-cat.xyz/tks/minio
      tag: RELEASE.2024-04-18T19-09-19Z
    mcImage:
      repository: harbor.taco-cat.xyz/tks/mc
      tag: RELEASE.2024-04-18T16-45-29Z
    mode: standalone
    persistence:
      accessMode: ReadWriteOnce
      size: 500Gi
      storageClass: $(storageClassName)
    postJob:
      nodeSelector: {} # $(nodeSelector)
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 1Gi
    service:
      nodePort: 32000
      type: ClusterIP
    users:
    - accessKey: $(defaultUser)
      policy: consoleAdmin
      secretKey: $(defaultPassword)
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: thanos
  name: thanos
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: thanos
    version: 15.7.12
    origin: https://charts.bitnami.com/bitnami
  releaseName: thanos
  targetNamespace: taco-system
  values:
    bucketweb:
      enabled: true
      logLevel: info
      nodeSelector: {} # $(nodeSelector)
      refresh: 30m
      service:
        http:
          port: 8080
        type: ClusterIP
      timeout: 5m
    clusterDomain: $(clusterName)
    compactor:
      consistencyDelay: 30m
      enabled: true
      extraFlags: null
        # Compaction 수행 관련 커맨트
        # 아래와 같은 block stream들이 있을때
        # external_labels: {cluster="eu1", replica="1", receive="true", environment="production"}
        # external_labels: {cluster="eu1", replica="2", receive="true", environment="production"}
        # external_labels: {cluster="us1", replica="1", receive="true", environment="production"}
        # external_labels: {cluster="us1", replica="1", receive="true", environment="staging"}
        # --compact.enable-vertical-compaction 와 함께 --deduplication.replica-label="replica" 라고 설정하면 아래와 같이 compcation됨
        # external_labels: {cluster="eu1", receive="true", environment="production"} (2 streams, resulted in one)
        # external_labels: {cluster="us1", receive="true", environment="production"}
        # external_labels: {cluster="us1", receive="true", environment="staging"}
      logLevel: info
      nodeSelector: {} # $(nodeSelector)
      persistence:
        accessModes:
        - ReadWriteOnce
        enabled: true
        size: 20Gi
      resources:
        limits:
          cpu: 1000m
          memory: 1024Mi
      retentionResolution1h: 10y
      retentionResolution5m: 30d
      retentionResolutionRaw: 30d
      service:
        http:
          port: 9090
        type: ClusterIP
    existingObjstoreSecret: $(thanosObjstoreSecret)
    global:
      storageClass: $(storageClassName)
    image:
      registry: harbor.taco-cat.xyz
      repository: tks/thanos
      tag: 0.35.1-debian-12-r3
    metrics:
      enabled: false
      serviceMonitor:
        enabled: false
    minio:
      enabled: false
    query:
      dnsDiscovery:
        enabled: false
        sidecarsNamespace: lma
        sidecarsService: null
      nodeSelector: {} # $(nodeSelector)
      service:
        type: ClusterIP
      stores: $(thanosQueryStores)
    queryFrontend:
      config: |-
        type: IN-MEMORY
        config:
          max_size: 512MB
          max_size_items: 100
          validity: 100s
      enabled: true
      extraFlags: # # []
      nodeSelector: {} # $(nodeSelector)
      service:
        nodePorts:
          http: 30005
        type: NodePort
    ruler:
      alertmanagers:
      - http://alertmanager-operated:9093
      config:
        groups:
        - name: tks
          rules:
          - alert: PrometheusDown
            expr: absent(up{prometheus="lma/lma-prometheus"})
      enabled: true
      evalInterval: 1m
      logLevel: info
      nodeSelector: {} # $(nodeSelector)
      persistence:
        accessModes:
        - ReadWriteOnce
        enabled: true
        size: 8Gi
      podManagementPolicy: OrderedReady
      replicaCount: 1
      service:
        ports:
          http: 9090
          grpc: 10901
        nodePorts:
          http: 30010
          grpc: ""
        type: NodePort
      updateStrategy:
        type: RollingUpdate
    storegateway:
      autoscaling:
        enabled: false
      config: "type: IN-MEMORY\nconfig:\n  max_size: 250MB\n  max_item_size: 125MB"
      enabled: true
      logLevel: info
      nodeSelector: {} # $(nodeSelector)
      persistence:
        accessModes:
        - ReadWriteOnce
        enabled: true
        size: 8Gi
      replicaCount: 1
      service:
        ports:
          http: 9090
          grpc: 10901
        ## @param storegateway.service.nodePorts.http Specify the Thanos Store Gateway HTTP nodePort value for the LoadBalancer and NodePort service types
        ## @param storegateway.service.nodePorts.grpc Specify the Thanos Store Gateway GRPC nodePort value for the LoadBalancer and NodePort service types
        ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        ##
        nodePorts:
          http: ""
          grpc: ""
        type: ClusterIP
      updateStrategy:
        type: RollingUpdate
    volumePermissions:
      enabled: false
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: thanos-config
  name: thanos-config
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: thanos-config
    version: 0.1.6
    origin: https://openinfradev.github.io/helm-repo
  releaseName: thanos-config
  targetNamespace: taco-system
  values:
    objectStorage:
      enabled: true
      rawConfig:
        access_key: $(defaultUser)
        # aws_sdk_auth: true
        bucket: tks-thanos
        endpoint: $(s3Service)
        insecure: true
        secret_key: $(defaultPassword)
      secretName: $(thanosObjstoreSecret)
    sidecarsService:
      enabled: false
      endpoints:
      - 192.168.97.102 # should not be in the loopback range (127.0.0.0/8)
      name: thanos-sidecars
      nodePort: 30007
      port: 30901
      type: NodePort
  wait: true
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: prepare-etcd-secret
  name: prepare-etcd-secret
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: prepare-etcd-secret
    version: 0.2.0
    origin: https://openinfradev.github.io/helm-repo
  releaseName: prepare-etcd-secret
  targetNamespace: taco-system
  values:
    deployer: tks
    etcd:
      certdir: /etc/kubernetes/pki/etcd
      certfile: ca.crt
      client_certfile: peer.crt
      client_keyfile: peer.key
    image:
      repository: harbor.taco-cat.xyz/tks/hyperkube
      tag: v1.18.8
    nodeSelector:
      node-role.kubernetes.io/control-plane: ''
      # master node의 label을 환경에 맞게 적어야함
      # ex) 1.20< "node-role.kubernetes.io/master": ""
      #     >1.20 "node-role.kubernetes.io/control-plane": ""
      # ref. https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#urgent-upgrade-notes
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: loki
  name: loki
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: loki-distributed
    version: 0.79.0
    origin: https://grafana.github.io/helm-charts
  releaseName: loki
  targetNamespace: taco-system
  values:
    compactor:
      nodeSelector: {} # $(nodeSelector)
    distributor:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        storageClass: $(storageClassName)
    gateway:
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/nginx-unprivileged
        tag: 1.20.2-alpine
      nginxConfig:
        httpSnippet: client_max_body_size 50M;
        serverSnippet: client_max_body_size 50M;
      nodeSelector: {} # $(nodeSelector)
      service:
        annotations: {} # $(awsNlbAnnotation)
        type: ClusterIP
    global:
      clusterDomain: $(clusterDomain)
      dnsService: coredns
    indexGateway:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        storageClass: $(storageClassName)
    ingester:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        enabled: true
        inMemory: false
        size: 100Gi
        storageClass: $(storageClassName)
      resources:
        limits:
          cpu: '4'
          memory: 4Gi
        requests:
          cpu: 100m
          memory: 250Mi
    loki:
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/loki
        tag: 2.9.6
      schemaConfig:
        configs:
        - from: '2020-09-07'
          index:
            period: 24h
            prefix: loki_index_
          object_store: s3
          schema: v11
          store: boltdb-shipper
      storageConfig:
        aws:
          bucketnames: tks-loki
          s3: http://$(defaultUser):$(defaultPassword)@$(s3Service)/minio
          s3forcepathstyle: true
        boltdb_shipper:
          active_index_directory: /var/loki/index
          cache_location: /var/loki/cache
          cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space
          shared_store: s3
      structuredConfig:
        limits_config:
          ingestion_burst_size_mb: 50
          ingestion_rate_mb: 25
          max_global_streams_per_user: 0
          max_streams_per_user: 0
        table_manager:
          retention_deletes_enabled: true
          retention_period: 672h
    memcached:
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/memcached
        tag: 1.6.21-alpine
    memcachedChunks:
      nodeSelector: {} # $(nodeSelector)
    memcachedExporter:
      enabled: true
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/memcached-exporter
        tag: v0.13.0
    memcachedFrontend:
      nodeSelector: {} # $(nodeSelector)
    memcachedIndexQueries:
      nodeSelector: {} # $(nodeSelector)
    memcachedIndexWrites:
      nodeSelector: {} # $(nodeSelector)
    prometheusRule.enabled: true
    querier:
      nodeSelector: {} # $(nodeSelector)
    queryFrontend:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        storageClass: $(storageClassName)
    queryScheduler:
      nodeSelector: {} # $(nodeSelector)
    ruler:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        storageClass: $(storageClassName)
    serviceMonitor.enabled: true
    tableManager:
      nodeSelector: {} # $(nodeSelector)
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: loki-user
  name: loki-user
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: loki-distributed
    version: 0.79.0
    origin: https://grafana.github.io/helm-charts
  releaseName: loki
  targetNamespace: lma
  values:
    compactor:
      nodeSelector: {} # $(nodeSelector)
    distributor:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        storageClass: $(storageClassName)
    gateway:
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/nginx-unprivileged
        tag: 1.20.2-alpine
      nginxConfig:
        httpSnippet: client_max_body_size 50M;
        serverSnippet: client_max_body_size 50M;
      nodeSelector: {} # $(nodeSelector)
      service:
        annotations: {} # $(awsNlbAnnotation)
        type: ClusterIP
    global:
      clusterDomain: $(clusterName)
      # -- configures DNS service name
      dnsService: "kube-dns"
    indexGateway:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        storageClass: $(storageClassName)
    ingester:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        enabled: true
        inMemory: false
        size: 100Gi
        storageClass: $(storageClassName)
      resources:
        limits:
          cpu: '4'
          memory: 4Gi
        requests:
          cpu: 100m
          memory: 250Mi
    loki:
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/loki
        tag: 2.9.6
      schemaConfig:
        configs:
        - from: '2020-09-07'
          index:
            period: 24h
            prefix: loki_index_
          object_store: s3
          schema: v11
          store: boltdb-shipper
      storageConfig:
        aws:
          bucketnames: tks-loki
          s3: http://$(defaultUser):$(defaultPassword)@$(s3Service)/minio
          s3forcepathstyle: true
        boltdb_shipper:
          active_index_directory: /var/loki/index
          cache_location: /var/loki/cache
          cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space
          shared_store: s3
      structuredConfig:
        limits_config:
          ingestion_burst_size_mb: 50
          ingestion_rate_mb: 25
          max_global_streams_per_user: 0
          max_streams_per_user: 0
        table_manager:
          retention_deletes_enabled: true
          retention_period: 72h    # delete logs after 72h = 3 days
    memcached:
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/memcached
        tag: 1.6.21-alpine
    memcachedChunks:
      nodeSelector: {} # $(nodeSelector)
    memcachedExporter:
      enabled: true
      image:
        registry: harbor.taco-cat.xyz
        repository: tks/memcached-exporter
        tag: v0.13.0
    memcachedFrontend:
      nodeSelector: {} # $(nodeSelector)
    memcachedIndexQueries:
      nodeSelector: {} # $(nodeSelector)
    memcachedIndexWrites:
      nodeSelector: {} # $(nodeSelector)
    prometheusRule.enabled: true
    querier:
      nodeSelector: {} # $(nodeSelector)
    queryFrontend:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        storageClass: $(storageClassName)
    queryScheduler:
      nodeSelector: {} # $(nodeSelector)
    ruler:
      nodeSelector: {} # $(nodeSelector)
      persistence:
        storageClass: $(storageClassName)
    serviceMonitor.enabled: true
    tableManager:
      nodeSelector: {} # $(nodeSelector)
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: lma-bucket
  name: lma-bucket
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: ack-resources
    version: v1.0.2
  releaseName: lma-bucket
  targetNamespace: taco-system
  values:
    s3:
      buckets:
      - name: $(clusterName)-tks-thanos
      - name: $(clusterName)-tks-loki
      enabled: true
    tks:
      iamRoles: $(tksIamRoles)
      # # # [] #arn:aws:iam::482246953094:role/control-plane.cluster-api-provider-aws.sigs.k8s.io
---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  labels:
    name: opa-exporter
  name: opa-exporter
spec:
  helmVersion: v3
  chart:
    type: helmrepo
    repository: https://harbor.taco-cat.xyz/chartrepo/tks
    name: opa-scorecard
    version: 0.1.0
  releaseName: opa-exporter
  targetNamespace: taco-system
  values:
    gatekeeper:
      namespace: gatekeeper-system
    metrics:
      podmonitor: true
      servicemonitor:
        enabled: true
